# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI
# env:
  # VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  # VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout current branch
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install nodejs packages
      run: npm install --silent

    - name: Run sequelize module to create database and migration
      run: |
        npx sequelize db:create
        npx sequelize db:migrate
      env:
        NODE_ENV: test
        DB_TEST_USERNAME: ${{ vars.POSTGRES_USER }}
        DB_TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DB_TEST_HOST: ${{ vars.POSTGRES_HOST }}
        DB_TEST_NAME: ${{ vars.POSTGRES_DB }}

    - name: Run integration test
      run: npm run test
      env:
        DB_TEST_USERNAME: ${{ vars.POSTGRES_USER }}
        DB_TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DB_TEST_HOST: ${{ vars.POSTGRES_HOST }}
        DB_TEST_NAME: ${{ vars.POSTGRES_DB }}
        CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET }}


  # deploy-vercel:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest
  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Build Project Artifacts
  #       run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Deploy Project Artifacts to Vercel
  #       run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # this is the deployment sample for VPS or compute engine instance
  deploy-gcp:
    runs-on: ubuntu-latest

    needs: build-and-test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to GCP
        run: |
          ssh -i ${{ secrets.SSH_PRIVATE_KEY }} -p ${{ secrets.SSHPORT }} ${{ secrets.SSHUSER }}@${{ secrets.SSHHOST }} << EOF
            # Ganti user
            su userops
            echo "${{ secrets.SSHUSERPASS }}" | sudo -S su userops

            # Navigasi ke direktori proyek dan pull dari Git
            cd
            cd ~/BingleShop-Team1
            git pull origin main

            # Build dan jalankan Docker
            # docker compose down
            # docker compose up --build -d
          EOF
        env:
          SSHHOST: ${{ secrets.SSHHOST }}
          SSHUSER: ${{ secrets.SSHUSER }}
          SSHPORT: ${{ secrets.SSHPORT }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}